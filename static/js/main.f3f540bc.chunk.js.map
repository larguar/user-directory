{"version":3,"sources":["components/Header.js","util/Users.js","components/Search.js","components/Employee.js","util/API.js","components/Table.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Users","React","createContext","Search","context","useContext","type","placeholder","aria-label","onChange","event","handleSearchChange","Employee","developerState","headings","map","name","toLowerCase","key","onClick","sort","undefined","filteredUsers","login","picture","phone","email","dob","uuid","src","medium","alt","first","last","href","Date","date","toLocaleDateString","axios","get","Table","useState","users","order","setDeveloperState","useEffect","API","then","results","data","Provider","value","filter","target","filteredList","item","indexOf","heading","sortedUsers","a","b","localeCompare","length","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f3f540bc.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Header() {\n    return (\n        <header className=\"container-fluid\">\n            <div className=\"container\">\n                <h1>Employee Directory</h1>\n                <p className=\"lead\">Sort by name or use the search box to narrow your results.</p>\n            </div>\n        </header>\n    )\n}\n\nexport default Header;","import React from 'react';\n\nconst Users = React.createContext({});\n\nexport default Users;","import React, {useContext} from 'react';\nimport Users from '../util/Users';\n\nfunction Search() {\n    const context = useContext(Users);\n    return (\n        <form>\n            <input\n                className=\"form-control mr-sm-2\" \n                type=\"search\" \n                placeholder=\"Search for an Employee\" \n                aria-label=\"Search\" \n                onChange={event => context.handleSearchChange(event)} \n            />\n        </form>\n    );\n}\n\nexport default Search;","import React, {useContext} from 'react';\nimport Users from '../util/Users';\nimport Search from './Search';\n\nfunction Employee() {\n    const context = useContext(Users);\n\n    return (\n        <main className=\"container\">\n            <Search />\n            <table className=\"table table-striped table-responsive-md\">\n                <thead>\n                    <tr>\n                        {context.developerState.headings.map(({name}) => {\n                            return (\n                                <th\n                                    className={name.toLowerCase()}\n                                    key={name}\n                                    onClick={() => {context.sort(name.toLowerCase())}}\n                                >\n                                    {name}\n                                </th>\n                            );\n                        })}\n                    </tr>\n                </thead>\n                <tbody>\n                    {context.developerState.filteredUsers[0] !== undefined && context.developerState.filteredUsers[0].name !== undefined ? (\n                        context.developerState.filteredUsers.map(({ login, name, picture, phone, email, dob }) => {\n                            return (\n                                <tr key={login.uuid}>\n                                    <td className=\"align-middle\"><img src={picture.medium} alt={`${name.first} ${name.last}`} /></td>\n                                    <td className=\"align-middle\">{name.first} {name.last}</td>\n                                    <td className=\"align-middle\"><a href={'tel:' + phone}>{phone}</a></td>\n                                    <td className=\"align-middle\"><a href={'mailto:' + email}>{email}</a></td>\n                                    <td className=\"align-middle\">{new Date(dob.date).toLocaleDateString()}</td>\n                                </tr>\n                            );\n                        })\n                    ) : ( <div></div> )}\n                </tbody>\n            </table>\n        </main>\n    );\n}\n\nexport default Employee;","import axios from 'axios';\n\nexport default {\n    getUsers: () => {\n        return axios.get('https://randomuser.me/api/?results=100&nat=us');\n    }\n}","import React, {useState, useEffect} from 'react';\nimport Employee from './Employee';\nimport API from '../util/API';\nimport Users from '../util/Users';\n\nfunction Table() {\n      const [developerState, setDeveloperState] = useState({\n        users: [],\n        order: 'ascend',\n        filteredUsers: [],\n        headings: [\n          { name: 'Image' },\n          { name: 'Name' },\n          { name: 'Phone' },\n          { name: 'Email' },\n          { name: 'DOB' }\n        ]\n      });\n    \n      const sort = heading => {\n        if (developerState.order === 'descend') {\n            setDeveloperState({ order: 'ascend' })\n        } else {\n            setDeveloperState({ order: 'descend' })\n        }\n    \n        const compare = (a, b) => {\n          if (developerState.order === 'ascend') {\n            if (a[heading] === undefined) {\n              return 1;\n            } else if (b[heading] === undefined) {\n              return -1;\n            } else if (heading === 'name') {\n              return a[heading].first.localeCompare(b[heading].first);\n            } else {\n              return b[heading] - a[heading];\n            } \n          } else {\n            if (a[heading] === undefined){\n              return 1;\n            } else if (b[heading] === undefined){\n              return -1;\n            } else if (heading === 'name') {\n              return b[heading].first.localeCompare(a[heading].first);\n            } else {\n              return b[heading]-  a[heading];\n            }\n          }\n        }\n        const sortedUsers = developerState.filteredUsers.sort(compare);\n        setDeveloperState({ ...developerState, filteredUsers: sortedUsers });\n      };\n   \n      const handleSearchChange = event => {\n        const filter = event.target.value;\n        const filteredList = developerState.users.filter(item => {\n          let values = item.name.first.toLowerCase();\n          return values.indexOf(filter.toLowerCase()) !== -1;\n        });\n    \n        setDeveloperState({ ...developerState, filteredUsers: filteredList });\n      };\n\n      useEffect(() => {\n        API.getUsers().then(results => {\n          setDeveloperState({ ...developerState, users: results.data.results, filteredUsers: results.data.results });\n        });\n      }, []);\n    \n      return (\n        <Users.Provider value={{ developerState, handleSearchChange, sort }}>\n          <div className=\"data-area\">\n            {developerState.filteredUsers.length > 0 \n            ? <Employee />\n            : <div></div>\n          }\n          </div>\n        </Users.Provider>\n      );\n    }\n    \n    export default Table;","import React from 'react';\nimport Header from './components/Header';\nimport Table from './components/Table';\n\nfunction App() {\n    return (\n        <div className='App'>\n            <Header />\n            <Table />\n        </div>\n    )\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}